FORMAT: 1A
HOST: https://testbedapp.giftbit.com/papi/v1

# Giftbit API
Giftbit's RESTFul API allows you to automatically send digital gift cards for hundreds of top brands to your recipients as part of your system’s workflow. 
This document includes a definitive list of endpoints defined under the 'Reference' section, along with common use cases, error code reference, and code examples. 

You can try all of the API calls directly from this interactive document (or your preferred REST client) with an `access_token` from your Giftbit Testbed account. If you don't already have a Testbed account you can sign-up <em><a href="https://testbedapp.giftbit.com/register" target="_blank">here</a></em>.
Once you sign-up you'll receive a welcome email containing everything you need to create an `access_token` and get going right away.  Your Testbed account will also let you go through and test the entire recipient gift claim experience for the gift offers you send through your test account.

## Environments and URLs

### Testbed API root
<em>`https://testbedapp.giftbit.com/papi/v1`</em>

 <em><a href="https://testbedapp.giftbit.com/register" target="_blank">Sign up for testbed</a></em> and get building right away.

### Production API root
<em>`https://api.giftbit.com/papi/v1`</em>

Contact the Giftbit API support team at testbed@giftbit.com when you are ready for production access.

### Environment differences
There are a few key differences between Giftbit’s Testbed and production APIs designed to make building and testing your integration as easy and safe as possible:
* All gift emails sent through Testbed will not go to the specified recipient email but instead be sent to the email address you provided for your testbed account signup, allowing you to test the full gifting process safely.
* Gift emails from Testbed all have a header identifying them as test emails.
* The brands in testbed are not reflective of what brands are available in production.  See <a href="https://www.giftbit.com/brands/">https://www.giftbit.com/brands/</a> for a production list. Or access the `/brands` endpoint with your production API token
* You will have a different API token for Testbed and production.
* All of your account settings are set separately in testbed and production.
* To encourage continuous integration testing against our Testbed API, you will be given a very large initial account balance on your Testbed account. A test credit card (no real charges) will also be attached to the Testbed account so you can add more funds, if needed, from your funding dashboard.
* In production, you can fund your account via wire transfer. You may add a credit card and use it to fund your campaigns, but it is not a requirement.
    


## Common Use Cases
Depending on your use case, there are several different options for creating gift offers through the API. 
In all cases creating and sending a gift offer involves creating a campaign using the `/campaign` endpoint. A campaign
consists of a price of the gift(s) you are offering, one or more brands, and one or more contacts. If your use case requires delivering the gifts
via a unique shortlink then you can omit contacts and simply provide a `link_count` in the request.
<br><br>
The `/brands` endpoint allows you to retrieve the necessary information for the brands you'd like to include in your campaign, in particular the brand_code and an allowed price for the brand. 
Depending on the brand, some only allow certain gift values while others have an allowed range.
<br><br>

### Sending Predefined Brand(s) with Each Offer
A simple yet popular API use case is to set up a certain brand or choice of brands that is always used when
sending campaigns. In this use case, you'd retrieve the `brand_code` of each brand you want to send
manually through the `/brands` endpoint, choose a valid and desired gift price, and store them in your database or configuration.
Then, whenever you wish to create a campaign through the API, you'd provide those same predefined brand_codes and the price.  If you include more than one brand in a campaign, the recipient will get to choose their desired brand as part of the claim process.

### Providing an Interactive Brand Marketplace 
Providing your users with an interactive marketplace where they can select the gift they want from Giftbit's entire catalog of brands from within your app or web offering is another workflow the Giftbit API supports.
In this type of integration, you use the `/brands` endpoint to dynamically retrieve Giftbit's catalog of brands, restricted by the criteria of your choice. The API provides the
capability to restrict results by any combination of price, currency, region, or search term. It also supports results paging.

## Delivery Types
Giftbit has two delivery types for your gift offers: `GIFTBIT_EMAIL` and `SHORTLINK`. Note that in each case
the content Giftbit provides to the recipient is the same (the Giftbit email content is the same as the shortlink
destination web page) so all information around branding, templates, and gift content applies to both delivery
types. All reporting and statistics are available for both delivery methods.

### Giftbit Email Delivery
If you have email addresses for your recipients, email delivery is the recommended fastest and most
reliable delivery method. Giftbit specializes in email deliverability and trusted best practices. We will deliver
your branded gift offer to each supplied contact via an HTML email. Bounces, spam complaints, and other
deliverability issues are made available to you so that you can keep your recipient lists clean and of high
quality. You must include one or more recipients to send the offer to in your campaign creation request, and
the `delivery_type` parameter may be omitted or set to `GIFTBIT_EMAIL`.

### Shortlink Delivery (for delivering the gifts yourself)
In the cases where email-based delivery is not appropriate or you do not have email addresses for your
recipients, you may create a campaign where each gift offer is represented by a unique shortlink. 
To do so you set the `delivery_type` parameter to `SHORTLINK` and provide either a `link_count` or a list of contacts.
You can retrieve the links via the `/links` or `/gifts` endpoint which are usually ready within minutes. You can then deliver them yourself to your recipients physically or
digitally as you see fit for ultimate flexibility. 
<br><br>
When using `delivery_type` of `SHORTLINK` and providing contacts, Giftbit does NOT deliver an email to
those contacts. The ability to provide contacts for shortlink campaigns is so that you can correlate your links
to given recipients in our system without needing to keep track of it
in yours.  This correlation is visible anywhere we provide your gift offer history
information including reports, the web application, and the /gifts endpoint.  It is up to you to ensure you deliver the correct link to the corresponding contact. Alternatively, when providing just 
a `link_count` you can retrieve redemption information for each link so it's possible to correlate link redemption information with
recipients in your system.

## Templates
Templates allow your gift messages to be richly formatted and provide a nice separation of responsibility
between content creators and developers. This is done by allowing the gift content (subject, the message with formatting and
rich content, and company brand image) to be maintained through the web interface and WYSIWYG editor,
without requiring any changes to the API calls themselves when the content
changes. To get started with templates navigate to the templates section of your account. 
<br><br>
Each template will be auto-assigned a unique uppercase short identifier shown in the web interface. This is the 
id you'll use in the `gift_template` field of the `/campaign` creation request. Note that if you provide a gift template
then you must omit the message and subject in the request, unless you want to override the template content in that particular
request.

While we highly recommend using templates, it is not mandatory.  You may specify the subject and message for your offers via the `/campaign` campaign creation request.

## HTTP Success and Error codes
Your API integration should always check the HTTP response code to ensure correct handling of success and error conditions.  ONLY an HTTP status of 200 means the request was successful.  For non 200 responses, the predictable response body (described below) will give you details on why the request failed.  We suggest logging any failure response body as best practice; the Giftbit support team will need the full response body to assist with troubleshooting. This section gives details on the response codes and recommended actions.

### Success Responses

**200:**  Success.  See the reference section for success response formats for each endpoint.  

### Error Responses
All non 200 responses should be treated as an error and either retried, or the request fixed and then retried.  This section details the different potential non 200 responses. To assist with your programmatic error handling and troubleshooting, all error response bodies are returned in the following JSON format:

```
{
    "error": {
        "code": "<value>",
        "name": "<value>",
        "message": "<value>"
    },
    "status": <value>
}
```

* "code": an enum style error code that represents the problem and will not change.
* "name": a human readable error name.
* "message": request specific information about the error.
* "status": an integer that matches the http status code returned.

Example:

```
{
    "error": {
        "code": "ERROR_CAMPAIGN_INVALID_BRAND",
        "name": "Invalid Brand or Brand/Price combination",
        "message": "brand_code: itunesus - price_in_cents: 50000 - The brand_code provided is not valid or not available for the given price"
    },
    "status": 422
}
```

### Error response codes

**400:** Error due to a malformed request body such as broken JSON or missing required element.  Requires fixing up the request body.

**401/403:** An authentication or authorization failure.  Generally related to a missing or invalid `access_token`.  Ensure you are authenticating correctly.

***422:*** The request is formatted correctly but one or more parameters in the body or URL are not valid.  An example would be trying to create a campaign with a gift value outside of the allowed range for that brand.  Ensure the request parameters are valid.

***429:*** Too many requests.  The API allows you to make 4 requests per second.  Retry your request with a backoff delay.  Note that you can simulate this condition in the Testbed environment to assist with your error handling development without actually producing a high request rate by passing a `SIMULATE-RATELIMIT` header with a value of `true` for `POST` requests to the `/campaign` endpoint.

***5xx:*** An unexpected error on the Giftbit side.  Retry the request, and if failures persist contact support.  Note that the response body format in the 5xx case may not match the common error response format described.

## Providing feedback on the API Documentation

The Giftbit team makes heavy use of external APIs ourselves, and we know how frustrating it can be when the documentation is unclear or doesn't match the actual API behaviour.  If you find any such problems with ours, don't hesitate to let us know via testbed@giftbit.com

## Authentication [/]
You can authenticate in one of two ways when making API calls:
* Include your token prefixed by the word ‘Bearer’ (case sensitive) and a space in the “Authorization” HTTP header. The examples in this document use this format and it is recommended.
* Include the token in “access_token” as a URL parameter. You will need to URL encode your token if using this method.


### authenticate using header [GET /]
+ Request
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
    
+ Response 200
    + Attributes
        + username (string) - The username associated with the credentials provided.
        + displayname (string) - The display name associated with the credentials provided.
        + info 
            + code (string) - Status code for the request. Values
                   INFO_CREDENTIALS - Credentials are valid.
               
            + Body
                {
                    "username":"example_merchant@giftbit.com",
                    "displayname":"Example Merchant",
                    "info":
                        {
                            "code":"INFO_CREDNTIALS",
                            "name":"Credentials are valid",
                            "message":"The credentials used are valid and login attempt was successful."
                        }
                }
    
+ Response 401

        {
            "status":401,
            "error":{
                "code": "ERROR_UNAUTHORIZED",
                "name": "Unauthorized",
                "message": "Access Token missing or invalid"
            }
        }
    

### authenticate using access token in parameters [GET /{?access_token}]
+ Parameters 
    + access_token
    
+ Response 200
    + Attributes
        + username (string) - The username associated with the credentials provided.
        + displayname (string) - The display name associated with the credentials provided.
        + info 
            + code (string) - Status code for the request. Values
                    INFO_CREDENTIALS - Credentials are valid.
            + Body
                {
                    "username":"example_merchant@giftbit.com",
                    "displayname":"Example Merchant",
                    "info":
                        {
                            "code":"INFO_CREDNTIALS",
                            "name":"Credentials are valid",
                            "message":"The credentials used are valid and login attempt was successful."
                        }
                }
        
+ Response 401

        {
            "status":401,
            "error":{
                "code": "ERROR_UNAUTHORIZED",
                "name": "Unauthorized",
                "message": "Access Token missing or invalid"
            }
        }

## Regions [/regions]

Lists all available regions.  The id returned can be used in conjunction with `/brands` to filter brand results to particular region. 

## list regions [GET /regions]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Response 200
    + Attributes
        + regions 
            + id (number) - A numeric identifier for the region.
            + name (string) - The name of the region.
            + `image_url` (string) - An image for the region.
        + info
            + code (string) - Status code. [`INFO_RETRIEVED_REGIONS`]
    
    + Body
            
            {
                "regions": [
                    {
                        "id": 1,
                        "name": "Canada",
                        "image_url": "https://s3-us-west-2.amazonaws.com/staticimageskiind/flags/CA@3x.png"
                    },
                    {
                        "id": 2,
                        "name": "USA",
                        "image_url": "https://s3-us-west-2.amazonaws.com/staticimageskiind/flags/US@3x.png"
                    },
                    {
                        "id": 3,
                        "name": "Global",
                        "image_url": "https://s3-us-west-2.amazonaws.com/staticimageskiind/flags/GLBL@3x.png"
                    },
                    {
                        "id": 4,
                        "name": "Australia",
                        "image_url": "https://s3-us-west-2.amazonaws.com/staticimageskiind/flags/AU@3x.png"
                    }
                ],
                "info": {
                    "code": "INFO_RETRIEVED_REGIONS",
                    "name": "Regions Retrieved",
                    "message": "A list of regions has been retrieved."
                }
            }
        

## Brands [/brands]
The `/brands` endpoint returns Giftbit's gift card brands available to you.   It provides complete search, filter, and paging functionality and is used in all use cases.

The `brand_code` returned, along with a valid price for the brand, is all you need to create your gift offers through the `campaign` endpoint.

Note that when you retrieve a single brand via the `/brands/{brand_code}` call, extended information about the brand is provided such as a full description and the allowed price range (or fixed set of allowed prices, depending on the brand).


### list brands [GET /brands{?region}{?max_price_in_cents}{?min_price_in_cents}{?currencyisocode}{?search}{?limit}{?offset}]
+ Parameters
    + region (number, optional) - Limits the results to brands that are available in the provided region as per the `id` returned from the `/region` endpoint.
    + `max_price_in_cents` (number, optional) - Limits the results to brands that have an available gift  option less than or equal to this value.
    + `min_price_in_cents` (number, optional) - Limits the results to brands that have an available gift  option greater than or equal to this value.
    + currencyisocode (string, optional) - Limits the results to brands that have an available gift matching the provided currency. Options:
        * CAD
        * USD
        * AUD
    + search (string, optional) - Limits the results to brands containing the search term provided in their name, description, or other fields.
    + limit (number, optional) - Limits the number of results to the provided value. Default value is 20.
    + offset (number, optional) - Offsets the results by provided value. Used for paging through results. Default value is 0.

+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN

+ Response 200

    + Attributes
        + brands
            + `brand_code` (string) - A unique alphanumeric identifier for the brand.  Used as input to the `/campaign` endpoint when sending your gift offers.
            + `name` (string) - The name of the Brand.
            + `disclaimer` (string, optional) - Certain brands have disclaimer text that must appear along with the brand when displayed.  This field will be omitted if there is no disclaimer for the given brand.
            + `image_url`  - A full URL to the brand's image to display.  Will always be a secure (https) image URL.
        + info
            + `code` (string) - A status code for the request. Possible values: `INFO_BRANDS_RETRIEVED`
        + `number_of_results` (number) - The number of results returned.
        + `limit` (number) - The maximum number of results that can be returned. 
        + `offset` (number) - The offset into the results. 
        + `total_count` (number) - The total number of results that matched request.
            
    + Body
    
            {
               "brands": [
                    {
                        "brand_code": "AMZNCOM",
                        "name": "Amazon.com",
                        "image_url": "https://uploadedimages.giftbit.com/550/amazon-30ec8f7a-616a-46aa-aa3f-cafbca10bddc.jpg",
                        "disclaimer": "Amazon.com Gift Cards (\"GCs\") sold by Giftbit Inc., an authorized and independent reseller of Amazon.com Gift Cards. Except as required by law, GCs cannot be transferred for value or redeemed for cash. GCs may be used only for purchases of eligible goods at Amazon.com or certain of its affiliated websites. For complete terms and conditions, see http://www.amazon.com/gc-legal. GCs are issued by ACI Gift Cards, Inc., a Washington corporation. All Amazon ®, ™ & © are IP of Amazon.com, Inc. or its affiliates. No expiration date or service fees."
                    },
                    {
                        "brand_code": "WHOLEFOODS",
                        "name": "Whole Foods Market",
                        "image_url": "https://uploadedimages.giftbit.com/wholefoods/wholefoodsgiftbit-f629cfa4-c7f1-4c6f-9a67-f8ee144b8db7.png"
                    }
                ],
               "number_of_results":2,
               "info":{
                  "code":"INFO_BRANDS_RETRIEVED",
                  "name":"Brand(s) Retrieved",
                  "message":"A list of brands or single brand has been retrieved"
               },
               "limit":20,
               "offset":0,
               "total_count":2
            }

### retrieve brand [GET /brands/{brand_code}] 
+ Parameters
    + `brand_code` (string, required) - Retrieve a single brand by brand_code.

+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Response 200

    + Attributes
        + brands
            + `brand_code` (string) - A unique alphanumeric identifier for the brand.  Used as input to the `/campaign` endpoint when sending your gift offers.
            + `name` (string) - The name of the Brand.
            + `disclaimer` (string, optional) - Certain brands have disclaimer text that must appear along with the brand when displayed.  This field will be omitted if there is no disclaimer for the given brand.
            + `image_url`  - A full URL to the brand's image to display.  Will always be a secure (https) image URL.
            + `regions` (array[number]) - a list of region ids (corresponding to the `/regions` endpoint in which this brand is available
            + `fund_currencyisocode` (string) - The three character currency code for this brand.
            + `variable_price` (boolean) - true if this brand allows gifts to be created of any value within a range. False if only a set of fixed prices is allowed.  If true, `min_price_in_cents` and `max_price_in_cents` will be set in the response.  If false, `allowed_prices_in_cents' will be set
            + `min_price_in_cents` (number, optional) - Gives the minimum possible gift value for variable price brands.  Will be present in the response only if variable_price=true
            + `max_price_in_cents` (number, optional) - Gives the maximum possible gift value for variable price brands.  Will be present in the response only if variable_price=true
            + `allowed_prices_in_cents` (array[number], optional) - Gives the possible gift values for non variable price brands.  Will be present in the response only if variable_price=false
            
        + info
            + `code` (string) - A status code for the request. Possible values: `INFO_BRANDS_RETRIEVED`
            
    + Body

            {
                "brand": {
                    "brand_code": "WHOLEFOODS",
                    "name": "Whole Foods Market",
                    "image_url": "https://uploadedimages.giftbit.com/wholefoods/wholefoodsgiftbit-f629cfa4-c7f1-4c6f-9a67-f8ee144b8db7.png",
                     "regions": [
                        2
                    ],
                    "fund_currencyisocode": "USD",
                    "inapp_available": true,
                    "variable_price": false,
                    "allowed_prices_in_cents": [
                        1000,
                        2500,
                        5000,
                        10000
                    ]
                },
                "info": {
                    "code": "INFO_BRANDS_RETRIEVED",
                    "name": "Brand(s) Retrieved",
                    "message": "A list of brands or single brand has been retrieved"
                }
            }       

+ Response 422

    + Body
    
            {
                "error": {
                    "code": "ERROR_BRANDS_NO_SUCH_BRAND",
                    "name": "No brand found",
                    "message": "No brand found matching that code"
                },
                "status": 422
            }

## Marketplace [/marketplace]
The `/marketplace` endpoint is deprecated.  Its functionality has been absorbed and improved into `/brands`.  Note that if you have built your `/campaign` calls providing marketplace_gifts, they will still continue to function and the request and response bodies will be unchanged so your implementation will not break. (Note, therefore, they may not exactly match the current `/campaign` documentation).

If you are planning to make any changes to your implementation, we strongly recommended migrating to `/brands`.  The impact should be small and result in a cleaner implementation.  The Giftbit team is happy to provide support if needed.

### list marketplace [GET /marketplace]
 
## Campaign [/campaign]
The `/campaign` endpoint is the heart of the Giftbit API.  A Campaign represents a gift offer to one or more recipients, and one or more brands from the `/brands` endpoint that each recipient can choose from.  See the "create campaign" reference for detailed information on the request and response bodies.

### Handling network timeouts on creation

If you receive a network timeout or other unexpected response (such as a 5xx) when creating a campaign, send the `POST` again using the same supplied `id`.  Giftbit will only ever create one campaign with a given supplied `id`.  It is important you choose your `id` in such a way that they are always unique across different campaigns.

### create campaign [POST /campaign]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN

    + Attributes
        + message: `Example: The gift message!` (string, optional) - Gift email message. Required if no supplied template.
        + subject: `Example: Please enjoy this gift!` (string, optional) - Gift email subject. Required if no supplied template.
        + `gift_template`: `Example: ABCDE` (string, optional) - The template id used for this campaign, as per the template section of your web account.  Recommended, but not required if providing the `message` and `subject` as part of the create campaign API call.
        + `delivery_type`: `Example: GIFTBIT_EMAIL` (string, required) - Determines if Giftbit will deliver the gift offers via email or create shortlinks for you to deliver yourself. Options `[GIFTBIT_EMAIL, SHORTLINK]`.
        + `link_count`: `5` (number, optional) - ​Only for use with delivery_type of SHORTLINK. Sets how many links to create. Cannot be used in conjunction with contacts.
        + contacts: `Example: [
            {
              "firstname": "Perry",
              "lastname": "Johnson",
              "email": "pjohnson2@giftbit.com"
            }
          ]` (required) - A list of contact objects and is required if not providing `link_count`. A contact is a json object defined by fields: 
                        * email (required)
                        * firstname (optional)
                        * lastname (optional)
        + `price_in_cents`: `2500` (number, required) - the value of the offer you are sending, in cents.  A value of 2500 would send a $25 gift offer for the given brand(s)
        + `brand_codes`: `Example:["itunesus","amazonus"]` (array[string], required) - a list of one or more brand_code as given by the `/brands` endpoint to send in your campaign.  To give your recipients a choice, simply provide more than one brand_code; recipients will then get to choose the brand they prefer as part of the claim process.
        + expiry: `Example: YYYY-MM-dd` (string, required) - The campaign's claim before date. After the end of this date (in Pacific Standard Time), recipients in this campaign will not be able to redeem their gift offers and the appropriate portion of the credits for any unclaimed gift offers will be returned to your account.  It may not exceed one year from the time of creation.
        + id: `Example: abc123` (string, required) - An identifier for the campaign assigned by the client (you).  Must be unique across all your campaigns.  If an unexpected error occurs sending your campaign, you can safely send the same POST again with the same `id`.  
        
        
    + Body 
        
            {
                "gift_template": "XDKHE",
                "contacts": [
                    {
                        "firstname":"Perry",
                         "lastname":"Johnson",
                         "email":"pjohnson@giftbit.com"
                     },
                     {
                        "firstname":"Rita",
                         "lastname":"Robson",
                         "email":"rrobson@giftbit.com"
                     }
                ],
                "price_in_cents":5000,
                "brand_codes": [
                    "itunesus",
                    "amazonus"
                 ],
                "expiry":"2018-11-01",
                "id":"clientProvidedGiftId_abc123"
            }
        
+ Response 200
    + Attributes
        + info
            + code (string) - Status code for request. Possibilities: 
                    `INFO_CAMPAIGN_CREATED` - Campaign creation has begun successfully
                    `INFO_CAMPAIGN_CREATED_FUNDS_REQUIRED` - Campaign creation request was successfully received by Giftbit but there are insufficient funds in your Giftbit account to cover the cost of the campaign. Note you do not need to resend the campaign. It will automatically be sent when there are enough funds in your account.
                    `INFO_CAMPAIGN_CREATED_FUNDS_PENDING` - The campaign creation request was successfully received by Giftbit but pending funds (such as a cheque or wire transfer that you sent) have not yet cleared. Note you do NOT need to resend the campaign as soon as your pending funds clear and become available, the campaign will be automatically delivered to your recipients.
                
        + campaign
            + message (string) - The message for the campaign.
            + subject (string) - The subject for the campaign.
            + contacts (object) - A list of contacts the campaign is being sent to.
            + price_in_cents (number) - The amount of the gift offer to each recipient.
            + brand_codes (array[string]) - The brand(s) of gift cards sent.
            + status (string) - The status of the campaign. Possibilities:
                API_CREATING - The campaign is in the process of being created.
                AWAITING_FUNDS - The campaign has not yet been delivered to the recipient(s)
                        because of insufficient funds in your Giftbit account. You do NOT need to
                        resend the campaign as soon as you add funds to your account or your pending
                        funds clear, the campaign will be automatically delivered to your recipients.
                CAMPAIGN_CREATED - The campaign has been created. Note the gift emails may still be in the process of being delivered at this point.
            + uuid (string) - A unique identifier for the campaign generated by Giftbit. This id can be used to retrieve the campaign.
            + `delivery_type` (string) - The delivery type of the campaign. Possibilities:
                
                    GIFTBIT_EMAIL
                    SHORTLINK
                
            + expiry (string) - The campaign's claim before date as described in creation parameters.
            + `contact_success_count` (number) - The number of contacts added successfully. 
            + `contact_failure_count` (number) - The number of contacts that could not be added to the campaign. This occurs for instance when a contact email has been flagged as undeliverable.
        + fees - Information about the cost of the campaign and any associated fees at creation or completion time.
        + id (string) - The client provided id for the campaign.  
    + Body 
    
            {
               "info":{
                  "code":"INFO_CAMPAIGN_CREATED",
                  "name":"Campaign Created",
                  "message":"Campaign creation has begun."
               },
               "status":200,
               "campaign":{
                  "message":"Thanks for being such an awesome customer!",
                  "subject":"Please enjoy this gift!",
                  "contacts":[
                     {
                        "email":"pjhonson@giftbit.com",
                        "firstname":"Perry",
                        "added_succesfully":true,
                        "lastname":"Johnson",
                        "message":"New contact"
                     },
                     {
                        "email":"rrobson@giftbit.com",
                        "firstname":"Rita",
                        "added_succesfully":true,
                        "lastname":"Robson",
                        "message":"New contact"
                     }
                  ],
                  "price_in_cents": 5000,
                  "brand_codes": [
                        "itunesus",
                        "amazonus"
                  ],
                  "status":"API_CREATING",
                  "uuid":"9a405b513c11413aaac593a0c2e1a15d",
                  "suppress_default_greeting":false,
                  "delivery_type":"GIFTBIT_EMAIL",
                  "expiry":"2017-05-01",
                  "contacts_success_count":2,
                  "contacts_failure_count":0,
                  "fees":{
                     "cost_entries":[
                        {
                           "percentage":0,
                           "fee_type":"PREFUND_GIFT_COST",
                           "amount_in_cents":2000,
                           "currency":"USD",
                           "tax_type":"NOTAX",
                           "tax_in_cents":0,
                           "number_of_gifts":2,
                           "fee_per_gift_in_cents":1000
                        },
                        {
                           "percentage":0.000,
                           "fee_type":"BREAKAGE_PERCENTAGE",
                           "amount_in_cents":0,
                           "currency":"USD",
                           "tax_type":"NOTAX",
                           "tax_in_cents":0,
                           "number_of_gifts":2,
                           "fee_per_gift_in_cents":0
                        }
                     ],
                     "subtotal_in_cents":2000,
                     "tax_in_cents":0,
                     "tax_type":"NOTAX",
                     "total_in_cents":2000
                  },
                  "id":"clientProvidedGiftId_abc123"
               }
            }
            
+ Response 422
    + Attributes
        + status (number) - the http status code
        + error 
            + code (string) - An enum-style error code desribing the reason for failure.
            + name (string) - human readable error name
            + message (string) - request context specific error message
                   
    + Body
            
            {
                "error": {
                    "code": "ERROR_CAMPAIGN_INVALID_BRAND",
                    "name": "Invalid Brand or Brand/Price combination",
                    "message": "brand_code: itunesus - price_in_cents: 50000 - The brand_code provided is not valid or not available for the given price"
                },
                "status": 422
            }
 

### retrieve campaign by id or uuid [GET /campaign/{id_or_uuid}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Parameters
    + `id_or_uuid`: clientProvidedGiftId_abc123 (required) - The campaign id or uuid. The id is the identifier for the campaign assigned by the client or the uuid which is assigned by Giftbit.
    
+ Response 200
    + Attributes
        + info
            + code (string) - Status code for the request. [INFO_CAMPAIGN_RETRIEVED]
        + campaign (object) - The returned campaign object.
    + Body
    
            {
               "info":{
                  "code":"INFO_CAMPAIGN_RETRIEVED",
                  "name":"Campaign Retrieved",
                  "message":"A campaign or list of campaigns has been retrieved."
               },
               "campaign":{
                  "message":"Thanks for being such an awesome customer!",
                  "subject":"Please enjoy this gift!",
                  "contacts":[
                     {
                        "email":"pgibbons@giftbit.com",
                        "firstname":"Peter",
                        "lastname":"Gibbons"
                     },
                     {
                        "email":"brobson@giftbit.com",
                        "firstname":"Bob",
                        "lastname":"Robson"
                     }
                  ],
                  "price_in_cents": 5000,
                  "brand_codes": [
                        "itunesus"
                  ],
                  "status":"CAMPAIGN_CREATED",
                  "uuid":"ee0d3f657fb640c987033e63a82e2279",
                  "suppress_default_greeting":false,
                  "delivery_type":"GIFTBIT_EMAIL",
                  "expiry":"2017-05-01",
                  "fees":{
                     "cost_entries":[
                        {
                           "percentage":0,
                           "fee_type":"PREFUND_GIFT_COST",
                           "amount_in_cents":2000,
                           "currency":"USD",
                           "tax_type":"NOTAX",
                           "tax_in_cents":0,
                           "number_of_gifts":2,
                           "fee_per_gift_in_cents":1000
                        },
                        {
                           "percentage":0.00,
                           "fee_type":"BREAKAGE_PERCENTAGE",
                           "amount_in_cents":0,
                           "currency":"USD",
                           "tax_type":"NOTAX",
                           "tax_in_cents":null,
                           "number_of_gifts":2,
                           "fee_per_gift_in_cents":0
                        }
                     ],
                     "subtotal_in_cents":2000,
                     "tax_in_cents":0,
                     "tax_type":"NOTAX",
                     "total_in_cents":2000
                  },
                  "id":"clientProvidedGiftId_abc1232"
               }
            }



## Funds [/funds]
Real-time information on your account funding.

### retrieve funding information [GET /funds] 
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Response 200
    + Attributes
        + fundsbycurrency - USD, CAD, PRO (demo credits)
        + `available_in_cents` (number) - Value, in cents of available funds in your account. This is your purchasing power for new gift campaigns.
        + `pending_in_cents` (number) - Value, in cents, of funds for your account that have been sent by you but yet fully processed by Giftbit. These will move to available balance once processed.
        + `reserved_in_cents` (number) - Value, in cents, of funds that are held to cover the cost of outstanding gift offers that have not yet been claimed and are still within the claim before date.
    + Body

            {
              "info": {
                "code": "INFO_FUNDS",
                "name": "Fund information retrieved",
                "message": "Your current fund information was retrieved."
              },
              "fundsbycurrency": {
                "USD": {
                  "available_in_cents": 196525,
                  "pending_in_cents": 0,
                  "reserved_in_cents": 41500
                },
                "CAD": {
                  "available_in_cents": 6600,
                  "pending_in_cents": 0,
                  "reserved_in_cents": 1000
                },
                "PRO": {
                  "available_in_cents": 0,
                  "pending_in_cents": 0,
                  "reserved_in_cents": 0
                }
              }
            }


## Gifts [/gifts]
Detailed information on your sent gift offers.  A gift offer is automatically created for each recipient or shortlink when a Campaign is created.  This endpoint can be used to resend or cancel individual gift offers in addition to retrieving their details - note that once a gift offer has been claimed by the recipient it cannot be canceled.

All date/time fields are in Pacific Standard Time.

### list gifts [GET /gifts{?uuid}{?campaign_uuid}{?campaign_id}{?price_in_cents_greater_than}{?price_in_cents_less_than}{?recipient_name}{?recipient_email}{?delivery_status}{?status}{?created_date_greater_than}{?created_date_less_than}{?delivery_date_greater_than}{?delivery_date_less_than}{?redelivery_count_greater_than}{?redelivery_count_less_than}{?redeemed_date_greater_than}{?redeemed_date_less_than}{?limit}{?offset}{?sort}{?order}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Parameters
    + uuid (string, optional) - Return the gift with matching uuid.
    + campaign_uuid (string, optional) -​Filter gifts by the campaign with the matching uuid.
    + `campaign_id` (string, optional) -​Filter gifts by the campaign with the matching campaign id.
    + `price_in_cents_greater_than` (number, optional) -​Filter gift by their price in cents. Gifts from a gift of choice campaign may not have this value set. `price_in_cents_greater_than` can be used to filter gifts with prices in cents greater than the supplied value.
    + `price_in_cents_less_than` (number, optional) -​Filter gift by their price in cents. Gifts from a gift of choice campaign may not have this value set. `price_in_cents_less_than` can be used to filter gifts with prices in cents less than the supplied value.
    + `recipient_name` (string, optional) - Filter gifts by the name, or part of the name of the recipient. The search string must be at least 3 characters long. 
    + `recipient_email` (string, optional) -​Filter gifts by the email address, or part of the email of the recipient. The search string must be at least 3 characters long.
    + `delivery_status` (string, optional) - Filter gifts by their delivery status. Delivery status can be one of `UNSENT`, `DELIVERED`, `UNDELIVERABLE`, `TEMPORARILY_UNDELIVERABLE`, `UNSUBSCRIBED`, `COMPLAINT`.
    + status (string, optional) - Filter gifts by their status. Options: `SENT_AND_REDEEMABLE`, `REDEEMED`, `TO_CHARITY`, `GIVER_CANCELLED`, or `EXPIRED`.
    + `created_date_greater_than` (string, optional) - Filter gifts by their created date. Format `yyyy-MM-dd HH:mm:ss`.
    + `created_date_less_than` (string, optional) - Filter gifts by their created date. Format `yyyy-MM-dd HH:mm:ss`.
    + `delivery_date_greater_than` (string, optional) - Filter gifts by their delivery date. Format `yyyy-MM-dd HH:mm:ss`.
    + `delivery_date_less_than` (string, optional) - Filter gifts by their delivery date. Format `yyyy-MM-dd HH:mm:ss`.
    + `redelivery_count_greater_than` (number, optional) - Filter gifts by their redelivery count. 
    + `redelivery_count_less_than` (number, optional) - Filter gifts by their redelivery count. 
    + `redeemed_date_greater_than` (number, optional) - Filter gifts by their  redeemed date. Format `yyyy-MM-dd HH:mm:ss`.
    + `redeemed_date_less_than` (number, optional) - Filter gifts by their  redeemed date. Format `yyyy-MM-dd HH:mm:ss`.
    + limit (number, optional) - The maximum number of gifts to return at once. Default 20.
    + offset (number, optional) - The offset of the first gift in the total results. Default 0.
    + sort (string, optional) - The property you'd like to sort by. Options: `campaign_id`, `price_in_cents`, `recipient_name`, `recipient_email`, `delivery_status`, or status.
    + order (string, optional) - The order to sort by. Options: asc or desc. Default desc.

+ Response 200
    + Attributes
        + gifts
            + uuid (string) - A unique identifier for the gift generated by Giftbit.
            + `campaign_uuid` (string) - A unique identifier for campaign genereated by Giftbit.
            + `delivery_status` (string) - The delivery status of the gift.
                    UNSENT - The gift has been created but is not yet sent.
                    DELIVERED - The gift has been sent, and no bounce or other problem notifications have been received. This is the successful delivery status.
                    LINKCREATED - The gift is of delivery type SHORTLINK and it has been created and is ready to be redeemed.
                    UNDELIVERABLE - There has been a fatal issue with delivering the gift. This is often
                        caused by attempting to send a gift to an email address that does not exist. We
                        suggest double-checking the recipient address and changing or removing it for future
                        campaigns.
                    TEMPORARILY_UNDELIVERABLE - There has been a temporary email deliverability
                        issue to this recipient. This can be caused by issues like a full mailbox for their email
                        address. While they may eventually get their gift, It is not guaranteed so we suggest
                        following up with this recipient and resending their gift if necessary via the web
                        interface or the /gifts API endpoint.
                    UNSUBSCRIBED - Your recipient unsubscribed from the unsubscribe link in this or a
                        previous gift offer email. You should remove them from all future campaigns as Giftbit
                        will return an error if you attempt to send to them again.
                    COMPLAINT - Your recipient marked the gift message as spam. You should remove
                        them from all future campaigns as Giftbit will return an error if you attempt to send to
                        them again.
            + status (string) - The status of the gift offer.
                
                    SENT_AND_REDEEMABLE - The gift offer is created and is still redeemable.
                    REDEEMED - The gift offer has been claimed.
                    TO_CHARITY - The gift offer has been given to charity.
                    GIVER_CANCELLED - The gift offer was canceled by the sender.
                    EXPIRED - The gift offer is expired because its claim before passed before it was redeemed.
                
            + `management_link_dashboard` (string) - A link to viewing the gift offer in your Giftbit account.
            + `redelivery_count` (number) - The number of times the gift was resent to the recipient.
            + `campaign_id` (string) - The id of campaign provided by the client.
            + `price_in_cents` (number) - The value of the gift offer in cents.
            + `marketplacegift_id` (string) - DEPRECATED.  Refer to brand_code. The id of the marketplace gift associated with the offer. 
            + `brand_code` (string) The brand of the gift offer.  Will not be set if multiple brands were included in the campaign and the recipient has not chosen their brand as part of the claim process.
            + `shortlink` (string) - A link to the gift offer. Only available if campaign is of type SHORTLINK.
        + `number_of_results` (number) - The number of gifts returned from the request.
        + limit (number) - The maximum number of gifts to be returned from the request.
        + offset (number) - The offset into the gifts returned from the request.
        + `total_count` (number) - The total number of gifts that matched request. These can be paged through using offset and limit.
        + info
            + code (string) - Status code of request. [INFO_GIFTS]
    + Body
    
            {
               "gifts":[
                  {
                     "uuid":"d30be501ed2546e580c5c9eaf56633d9",
                     "campaign_uuid":"8f5835dfb637413793c5d55f8ea95e23",
                     "delivery_status":"LINKCREATED",
                     "status":"SENT_AND_REDEEMABLE",
                     "management_dashboard_link":"http://testbedapp.giftbit.com/campaign/campaignInfo?uuid=8f5835dfb637413793c5d55f8ea95e23&gift_uuid=d30be501ed2546e580c5c9eaf56633d9",
                     "redelivery_count":0,
                     "campaign_id":"may11",
                     "price_in_cents":500,
                     "brand_code":"itunesus",
                     "marketplacegift_id":"1",
                     "created_date":"2016-05-11 12:18:25",
                     "delivery_date":"2016-05-11 12:18:32",
                     "shortlink":"http://gtbt.co/S6Km75LFeWQ"
                  }
               ],
               "number_of_results":1,
               "limit":1,
               "offset":0,
               "total_count":8355,
               "info":{
                  "code":"INFO_GIFTS",
                  "name":"Gift information retrieved",
                  "message":"Returned gifts matching your search parameters."
               },
               "status":200
            }
            

### retrieve gift [GET /gifts/{uuid}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Parameters
    + uuid (required, string) - The uuid of the gift. Not to be mistaken for the uuid or id of the campaign.
    
+ Response 200
   
    + Body
        
            {
               "gift":{
                  "uuid":"d30be501ed2546e580c5c9eaf56633d9",
                  "campaign_uuid":"8f5835dfb637413793c5d55f8ea95e23",
                  "delivery_status":"LINKCREATED",
                  "status":"SENT_AND_REDEEMABLE",
                  "management_dashboard_link":"http://testbedapp.giftbit.com/campaign/campaignInfo?uuid=8f5835dfb637413793c5d55f8ea95e23&gift_uuid=d30be501ed2546e580c5c9eaf56633d9",
                  "redelivery_count":0,
                  "campaign_id":"may11",
                  "price_in_cents":500,
                  "brand_code":"itunesus",
                  "marketplacegift_id":"1",
                  "created_date":"2016-05-11 12:18:25",
                  "delivery_date":"2016-05-11 12:18:32",
                  "shortlink":"http://gtbt.co/S6Km75LFeWQ"
               },
               "info":{
                  "code":"INFO_GIFTS",
                  "name":"Gift information retrieved",
                  "message":"Returned gifts matching your search parameters."
               },
               "status":200
            }
            
            

            
### resend gift [PUT /gifts/{uuid}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
    + Attributes
        + resend: true (boolean, required)
            
+ Parameters
    + uuid (required, string) - The uuid of the gift. Not to be mistaken for the uuid or id of the campaign.
    
    
+ Response 200
   
    + Body

            {
               "gift":{
                  "uuid":"7e0ef82bc386493498f145578268f1b2",
                  "campaign_uuid":"f11712f1102248ea94c47bdd3ed95690",
                  "delivery_status":"DELIVERED",
                  "status":"SENT_AND_REDEEMABLE",
                  "management_dashboard_link":"http://testbedapp.giftbit.com/campaign/campaignInfo?uuid=f11712f1102248ea94c47bdd3ed95690&gift_uuid=7e0ef82bc386493498f145578268f1b2",
                  "redelivery_count":1,
                  "recipient_email":"tim+1@giftbit.com",
                  "recipient_name":"tim1",
                  "price_in_cents":500,
                  "brand_code": "itunesus",
                  "marketplacegift_id":"1",
                  "created_date":"2016-05-11 14:18:44",
                  "delivery_date":"2016-05-11 14:18:47"
               },
               "info":{
                  "code":"INFO_GIFTS_RESENT",
                  "name":"Gift resent",
                  "message":"The gift has been resent."
               },
               "status":200
            }

### cancel gift [DELETE /gifts/{uuid}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Parameters
    + uuid (required, string) - The uuid of the gift. Not to be mistaken for the uuid or id of the campaign.
    
+ Response 200
    
    + Body
    
            {
               "gift":{
                  "uuid":"d30be501ed2546e580c5c9eaf56633d9",
                  "campaign_uuid":"8f5835dfb637413793c5d55f8ea95e23",
                  "delivery_status":"LINKCREATED",
                  "status":"GIVER_CANCELLED",
                  "management_dashboard_link":"http://testbedapp.giftbit.com/campaign/campaignInfo?uuid=8f5835dfb637413793c5d55f8ea95e23&gift_uuid=d30be501ed2546e580c5c9eaf56633d9",
                  "redelivery_count":0,
                  "campaign_id":"may11",
                  "price_in_cents":500,
                  "brand_code":"itunesus",
                  "marketplacegift_id":"1",
                  "created_date":"2016-05-11 12:18:25",
                  "delivery_date":"2016-05-11 12:18:32",
                  "shortlink":"http://gtbt.co/S6Km75LFeWQ"
               },
               "info":{
                  "code":"INFO_GIFTS_CANCELED",
                  "name":"Gift canceled",
                  "message":"The gift has been canceled."
               },
               "status":200
            }

## Links [/links]
Retrieve shortlinks for your link based gift offer campaigns.  After creating a SHORTLINK campaign, you can  immediately begin polling this endpoint (we recommend a one minute poll interval) and checking the `info`.`code` value.  It will change from `INFO_LINKS_GENERATION_IN_PROGRESS` to `INFO_LINKS` when the links are available (and they will be included in the response) as per the documented response body.

### retrieve shortlinks by id or uuid [GET /links/{id_or_uuid}{?limit}{?offset}]
+ Request (application/json)
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN
            
+ Parameter
    + `id_or_uuid` (number, required) - The client provided id of the campaign or the uuid assigned by Giftbit.
    + limit (number, optional) - Limits the number of results to the provided value. The default value is 50.
    + offset (number, optional) - Offsets the results by provided value. Used for paging through results. The default value is 0.
            
+ Response 200
    + Attributes
        + info
            + code (string) - A status code for the links.
                
                    INFO_LINKS - The links are ready.
                    INFO_LINKS_GENERATION_IN_PROGRESS - The links are still being created.
                    ERROR_LINKS_CAMPAIGN_INACTIVE - The claim before date on the gift offer has passed.
                    ERROR_LINKS_BAD_CAMPAIGN - Invalid campaign id or the campaign was found but is not a SHORTLINK campaign.                
                
        + shortlinks
            + number (number) - Link number.
            + shortlink (string) - The gift offers url.
        + `number_of_results` (number) - The total number of returned links.
        + limit (number) - The number of links returned.
        + offset (number) - The offset into the matched results.
        + `total_count` (number) - The total number of links.
        
    + Body
    

            {
              "info": {
                "code": "INFO_LINKS",
                "name": "Link information retrieved",
                "message": "Returned links for requested Campaign"
              },
              "shortlinks": [
                {
                  "number": 1,
                  "shortlink": "http://gtbt.co/CayUS76pqqP"
                },
                {
                  "number": 2,
                  "shortlink": "http://gtbt.co/PX4KwQW9Ggf"
                }
              ],
              "number_of_results": 2,
              "limit": 2,
              "offset": 0,
              "total_count": 100
            }
            
+ Response 200
    + Body
    
            {
               "info":{
                  "code":"INFO_LINKS_GENERATION_IN_PROGRESS",
                  "name":"Links have not yet completed generating; request again in 5 minutes",
                  "message":"Link generation is not complete. Large campaigns will take some time to process and may be held for manual review; use the /campaign endpoint for more detail on your campaign"
               }
            }